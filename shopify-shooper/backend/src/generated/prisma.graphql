# source: https://us1.prisma.sh/christian-firmi/shoppers-allgoing/dev
# timestamp: Mon Jan 21 2019 02:16:29 GMT-0500 (Eastern Standard Time)

type AggregateProduct {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  deleteProduct(where: ProductWhereUniqueInput!): Product
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Product implements Node {
  id: ID!
  product_name: String!
  product_price: Int!
  product_inventory_total: Int!
}

"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  product_name: String!
  product_price: Int!
  product_inventory_total: Int!
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  product_name_ASC
  product_name_DESC
  product_price_ASC
  product_price_DESC
  product_inventory_total_ASC
  product_inventory_total_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProductPreviousValues {
  id: ID!
  product_name: String!
  product_price: Int!
  product_inventory_total: Int!
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
}

input ProductUpdateInput {
  product_name: String
  product_price: Int
  product_inventory_total: Int
}

input ProductUpdateManyMutationInput {
  product_name: String
  product_price: Int
  product_inventory_total: Int
}

input ProductWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  product_name: String

  """All values that are not equal to given value."""
  product_name_not: String

  """All values that are contained in given list."""
  product_name_in: [String!]

  """All values that are not contained in given list."""
  product_name_not_in: [String!]

  """All values less than the given value."""
  product_name_lt: String

  """All values less than or equal the given value."""
  product_name_lte: String

  """All values greater than the given value."""
  product_name_gt: String

  """All values greater than or equal the given value."""
  product_name_gte: String

  """All values containing the given string."""
  product_name_contains: String

  """All values not containing the given string."""
  product_name_not_contains: String

  """All values starting with the given string."""
  product_name_starts_with: String

  """All values not starting with the given string."""
  product_name_not_starts_with: String

  """All values ending with the given string."""
  product_name_ends_with: String

  """All values not ending with the given string."""
  product_name_not_ends_with: String
  product_price: Int

  """All values that are not equal to given value."""
  product_price_not: Int

  """All values that are contained in given list."""
  product_price_in: [Int!]

  """All values that are not contained in given list."""
  product_price_not_in: [Int!]

  """All values less than the given value."""
  product_price_lt: Int

  """All values less than or equal the given value."""
  product_price_lte: Int

  """All values greater than the given value."""
  product_price_gt: Int

  """All values greater than or equal the given value."""
  product_price_gte: Int
  product_inventory_total: Int

  """All values that are not equal to given value."""
  product_inventory_total_not: Int

  """All values that are contained in given list."""
  product_inventory_total_in: [Int!]

  """All values that are not contained in given list."""
  product_inventory_total_not_in: [Int!]

  """All values less than the given value."""
  product_inventory_total_lt: Int

  """All values less than or equal the given value."""
  product_inventory_total_lte: Int

  """All values greater than the given value."""
  product_inventory_total_gt: Int

  """All values greater than or equal the given value."""
  product_inventory_total_gte: Int
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  product(where: ProductWhereUniqueInput!): Product
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
}
